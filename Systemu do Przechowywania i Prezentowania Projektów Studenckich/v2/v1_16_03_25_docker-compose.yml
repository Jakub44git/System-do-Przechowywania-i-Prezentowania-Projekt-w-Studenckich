version: '3.8'

services:
  # Frontend - aplikacja Vue.js
  frontend:
    build:
      context: ./docker/frontend
      dockerfile: Dockerfile
    container_name: student-projects-frontend
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "8080:80"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:3000
    depends_on:
      - backend
    networks:
      - app-network

  # Backend - API NestJS
  backend:
    build:
      context: ./docker/backend
      dockerfile: Dockerfile
    container_name: student-projects-backend
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/student_projects
      - JWT_SECRET=dev_secret_key_change_in_production
      - JWT_EXPIRATION=1d
      - AUTH_MODE=mock # Ustaw 'mock' dla lokalnego testowania lub 'ms-teams' dla integracji z MS Teams
    depends_on:
      - postgres
    networks:
      - app-network

  # Baza danych PostgreSQL
  postgres:
    image: postgres:15.4-alpine
    container_name: student-projects-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=student_projects
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

  # Serwer Nginx jako reverse proxy (tylko w środowisku produkcyjnym)
  # nginx:
  #   build:
  #     context: ./docker/nginx
  #     dockerfile: Dockerfile
  #   container_name: student-projects-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
  #     - ./docker/nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - app-network

  # Serwer PgAdmin (opcjonalnie - do zarządzania bazą danych)
  pgadmin:
    image: dpage/pgadmin4:7.6
    container_name: student-projects-pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - app-network

volumes:
  postgres-data:
  pgadmin-data:

networks:
  app-network:
    driver: bridge
